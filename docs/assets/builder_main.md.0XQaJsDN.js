import{_ as t,c as a,o as i,ag as s}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Function: main()","description":"","frontmatter":{},"headers":[],"relativePath":"builder/main.md","filePath":"builder/main.md"}'),r={name:"builder/main.md"};function n(o,e,d,h,l,c){return i(),a("div",null,[...e[0]||(e[0]=[s('<p><a href="./../">@technobuddha</a> / <a href="./../builder.html">builder</a> / main</p><h1 id="function-main" tabindex="-1">Function: main() <a class="header-anchor" href="#function-main" aria-label="Permalink to &quot;Function: main()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">projects</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Project</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[], </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">watch</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/builder/blob/main/src/main.ts#L21" target="_blank" rel="noreferrer">main.ts:21</a></p><p>Builds projects and optionally starts watchers based on command-line arguments.</p><p>Iterates through the provided projects, attempting to build each one. Any build errors are collected. If any errors occurred during the build process and not in watch mode, the process exits with a non-zero code.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Default value</th><th>Description</th></tr></thead><tbody><tr><td><code>projects</code></td><td><a href="./Project.html"><code>Project</code></a>[]</td><td><code>undefined</code></td><td>An array of <code>Project</code> objects to be built and optionally watched.</td></tr><tr><td><code>watch</code></td><td><code>boolean</code></td><td><code>false</code></td><td>If true, starts a watcher for each project.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="noreferrer"><code>Promise</code></a>&lt;<code>void</code>&gt;</p><p>A promise that resolves when all operations are complete.</p>',11)])])}const u=t(r,[["render",n]]);export{k as __pageData,u as default};
