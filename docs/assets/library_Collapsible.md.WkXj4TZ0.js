import{_ as e,c as i,o as s,ag as l}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Type Alias: Collapsible<T>","description":"","frontmatter":{},"headers":[],"relativePath":"library/Collapsible.md","filePath":"library/Collapsible.md"}'),t={name:"library/Collapsible.md"};function n(r,a,p,o,h,d){return s(),i("div",null,[...a[0]||(a[0]=[l(`<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_array.html">Array</a> &gt; <a href="./index_array_operations.html">Operations</a></p><h1 id="type-alias-collapsible-t" tabindex="-1">Type Alias: Collapsible&lt;T&gt; <a class="header-anchor" href="#type-alias-collapsible-t" aria-label="Permalink to &quot;Type Alias: Collapsible\\&lt;T\\&gt;&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Collapsible</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CollapsibleValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CollapsibleValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/collapse.ts#L48" target="_blank" rel="noreferrer">collapse.ts:48</a></p><p>Represents a value that can be &quot;collapsed&quot; into a flat sequence of values of type <code>T</code>.</p><p>A <code>Collapsible&lt;T&gt;</code> can be:</p><ul><li>A single value of type <code>T</code></li><li><code>null</code> or <code>undefined</code></li><li>An array of values (and/or <code>null</code>/<code>undefined</code>)</li><li>A function returning any of the above</li><li>An iterable yielding values (and/or <code>null</code>/<code>undefined</code>)</li></ul><p>This type is useful for APIs that accept flexible input forms, such as single values, arrays, lazy generators, or functions producing values, and need to process them uniformly.</p><h2 id="type-parameters" tabindex="-1">Type Parameters <a class="header-anchor" href="#type-parameters" aria-label="Permalink to &quot;Type Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Type Parameter</th><th>Description</th></tr></thead><tbody><tr><td><code>T</code> <em>extends</em> <a href="./CollapsiblePrimitive.html"><code>CollapsiblePrimitive</code></a></td><td>The primitive type that can be collapsed.</td></tr></tbody></table>`,10)])])}const y=e(t,[["render",n]]);export{k as __pageData,y as default};
