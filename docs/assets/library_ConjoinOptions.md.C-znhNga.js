import{_ as a,c as i,o as s,ag as n}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Type Alias: ConjoinOptions","description":"","frontmatter":{},"headers":[],"relativePath":"library/ConjoinOptions.md","filePath":"library/ConjoinOptions.md"}'),e={name:"library/ConjoinOptions.md"};function o(r,t,d,h,l,p){return s(),i("div",null,[...t[0]||(t[0]=[n(`<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_array.html">Array</a> &gt; <a href="./index_array_operations.html">Operations</a></p><h1 id="type-alias-conjoinoptions" tabindex="-1">Type Alias: ConjoinOptions <a class="header-anchor" href="#type-alias-conjoinoptions" aria-label="Permalink to &quot;Type Alias: ConjoinOptions&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> ConjoinOptions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  conjunction</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  oxford</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  separator</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/conjoin.ts#L9" target="_blank" rel="noreferrer">conjoin.ts:9</a></p><p>Options for creating a coordinated list with <a href="./conjoin.html">conjoin</a></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-label="Permalink to &quot;Properties&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Property</th><th>Type</th><th>Default value</th><th>Description</th><th>Defined in</th></tr></thead><tbody><tr><td><a id="conjunction"></a> <code>conjunction?</code></td><td><code>string</code></td><td><code>&#39;and&#39;</code></td><td>Conjunction to insert in the last position</td><td><a href="https://github.com/technobuddha/library/blob/main/src/conjoin.ts#L14" target="_blank" rel="noreferrer">src/conjoin.ts:14</a></td></tr><tr><td><a id="oxford"></a> <code>oxford?</code></td><td><code>boolean</code></td><td><code>true</code></td><td>If true, use the oxford comma</td><td><a href="https://github.com/technobuddha/library/blob/main/src/conjoin.ts#L19" target="_blank" rel="noreferrer">src/conjoin.ts:19</a></td></tr><tr><td><a id="separator"></a> <code>separator?</code></td><td><code>string</code></td><td><code>&#39;,&#39;</code></td><td>String used to separate values</td><td><a href="https://github.com/technobuddha/library/blob/main/src/conjoin.ts#L24" target="_blank" rel="noreferrer">src/conjoin.ts:24</a></td></tr></tbody></table>`,7)])])}const b=a(e,[["render",o]]);export{k as __pageData,b as default};
