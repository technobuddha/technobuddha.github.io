import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"Type Alias: TBJsonObject","description":"","frontmatter":{},"headers":[],"relativePath":"library/TBJsonObject.md","filePath":"library/TBJsonObject.md"}'),n={name:"library/TBJsonObject.md"};function h(l,s,p,o,r,k){return e(),a("div",null,[...s[0]||(s[0]=[t('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_json.html">JSON</a> &gt; <a href="./index_json_serialization.html">Serialization</a></p><h1 id="type-alias-tbjsonobject" tabindex="-1">Type Alias: TBJsonObject <a class="header-anchor" href="#type-alias-tbjsonobject" aria-label="Permalink to &quot;Type Alias: TBJsonObject&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TBJsonObject</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TBJsonValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { [</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Key</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">?:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TBJsonValue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> };</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/json.ts#L14" target="_blank" rel="noreferrer">json.ts:14</a></p><p>Matches a JSON object.</p><p>This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. Don&#39;t use this as a direct return type as the user would have to double-cast it: <code>jsonObject as unknown as CustomResponse</code>. Instead, you could extend your CustomResponse type from it to ensure your type only uses JSON-compatible types: <code>interface CustomResponse extends TBJsonObject { … }</code>.</p>',6)])])}const y=i(n,[["render",h]]);export{c as __pageData,y as default};
