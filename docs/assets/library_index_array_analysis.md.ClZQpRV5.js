import{_ as a,c as e,o as n,ag as r}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"Analysis","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_array_analysis.md","filePath":"library/index_array_analysis.md"}'),s={name:"library/index_array_analysis.md"};function o(i,t,l,d,h,_){return n(),e("div",null,[...t[0]||(t[0]=[r('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_array.html">Array</a></p><h1 id="analysis" tabindex="-1">Analysis <a class="header-anchor" href="#analysis" aria-label="Permalink to &quot;Analysis&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./longestCommonSubsequence.html">longestCommonSubsequence</a></td><td>Function</td><td>Determine the longest possible array that is subsequence of both of given arrays.</td></tr><tr><td><a href="./LongestCommonSubsequenceOptions.html">LongestCommonSubsequenceOptions</a></td><td>Type</td><td>Options for configuring the <a href="./longestCommonSubsequence.html">longestCommonSubsequence</a> calculation.</td></tr></tbody></table>',3)])])}const y=a(s,[["render",o]]);export{c as __pageData,y as default};
