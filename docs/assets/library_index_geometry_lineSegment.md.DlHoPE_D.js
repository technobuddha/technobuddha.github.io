import{_ as e,c as n,o as i,ag as a}from"./chunks/framework.8SQNO8WI.js";const c=JSON.parse('{"title":"Line Segment","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_geometry_lineSegment.md","filePath":"library/index_geometry_lineSegment.md"}'),r={name:"library/index_geometry_lineSegment.md"};function d(o,t,s,l,h,m){return i(),n("div",null,[...t[0]||(t[0]=[a('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_geometry.html">Geometry</a></p><h1 id="line-segment" tabindex="-1">Line Segment <a class="header-anchor" href="#line-segment" aria-label="Permalink to &quot;Line Segment&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./lineIntersection.html">lineIntersection</a></td><td>Function</td><td>Calculates the intersection point of two line segments.</td></tr><tr><td><a href="./lineLength.html">lineLength</a></td><td>Function</td><td>Calculates the length of a line segment.</td></tr><tr><td><a href="./LineSegment.html">LineSegment</a></td><td>Type</td><td>Represents a line segment in 2D space, defined by its start and end points.</td></tr><tr><td><a href="./midpoint.html">midpoint</a></td><td>Function</td><td>Calculates a point at a given fraction (<code>part</code>) along a line segment. By default it returns the true midpoint of the line segment</td></tr><tr><td><a href="./normalizeLineSegment.html">normalizeLineSegment</a></td><td>Function</td><td>Returns a <a href="./LineSegment.html">LineSegment</a> where the point with the higher y-coordinate is always the starting point (x0, y0). If the original line&#39;s y1 is greater than y0, the line is returned as-is. Otherwise, the start and end points are swapped.</td></tr><tr><td><a href="./OnLineOptions.html">OnLineOptions</a></td><td>Type</td><td>Options for the <a href="./isOnLine.html">isOnLine</a> function</td></tr><tr><td><a href="./polygonSides.html">polygonSides</a></td><td>Function</td><td>Generate line segments for each side of the polygon.</td></tr><tr><td><a href="./toLineSegment.html">toLineSegment</a></td><td>Function</td><td>Converts two Cartesian points into a <code>LineSegment</code> object.</td></tr></tbody></table>',3)])])}const p=e(r,[["render",d]]);export{c as __pageData,p as default};
