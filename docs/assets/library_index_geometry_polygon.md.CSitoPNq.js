import{_ as e,c as o,o as a,ag as n}from"./chunks/framework.8SQNO8WI.js";const y=JSON.parse('{"title":"Polygon","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_geometry_polygon.md","filePath":"library/index_geometry_polygon.md"}'),r={name:"library/index_geometry_polygon.md"};function d(i,t,l,s,h,g){return a(),o("div",null,[...t[0]||(t[0]=[n('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_geometry.html">Geometry</a></p><h1 id="polygon" tabindex="-1">Polygon <a class="header-anchor" href="#polygon" aria-label="Permalink to &quot;Polygon&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./area.html">area</a></td><td>Function</td><td>Calculates the area of a polygon given its vertices.</td></tr><tr><td><a href="./bounds.html">bounds</a></td><td>Function</td><td>Calculates the axis-aligned bounding rectangle for a given polygon.</td></tr><tr><td><a href="./centroid.html">centroid</a></td><td>Function</td><td>Calculates the centroid (geometric center) of a polygon.</td></tr><tr><td><a href="./convexHull.html">convexHull</a></td><td>Function</td><td>Computes the convex hull of a set of 2D points using the Monotone Chain algorithm.</td></tr><tr><td><a href="./edgeAngles.html">edgeAngles</a></td><td>Function</td><td>Generate normalized edge angles from polygon edges.</td></tr><tr><td><a href="./isClosed.html">isClosed</a></td><td>Function</td><td>Determines whether a given polygon is closed.</td></tr><tr><td><a href="./isIntersecting.html">isIntersecting</a></td><td>Function</td><td>Determines whether a given shape (either a LineSegment or a Polygon) intersects with a polygon.</td></tr><tr><td><a href="./isOnPolygon.html">isOnPolygon</a></td><td>Function</td><td>Determines whether a given point lies exactly on the boundary of a polygon.</td></tr><tr><td><a href="./isPolygon.html">isPolygon</a></td><td>Function</td><td>Determines if the provided object is a <code>Polygon</code>.</td></tr><tr><td><a href="./perimeter.html">perimeter</a></td><td>Function</td><td>Calculates the perimeter of a polygon.</td></tr><tr><td><a href="./Polygon.html">Polygon</a></td><td>Type</td><td>A polygon (a set of cartesian coordinates)</td></tr><tr><td><a href="./regularPolygon.html">regularPolygon</a></td><td>Function</td><td>Generates a regular polygon.</td></tr><tr><td><a href="./rotate.html">rotate</a></td><td>Function</td><td>Rotates a point or a polygon around a given origin by a specified angle.</td></tr><tr><td><a href="./scale.html">scale</a></td><td>Function</td><td>Scales a point or a polygon of points around a given origin by a specified amount.</td></tr><tr><td><a href="./star.html">star</a></td><td>Function</td><td>Generates a star-shaped polygon.</td></tr><tr><td><a href="./toClosed.html">toClosed</a></td><td>Function</td><td>Ensures that a given polygon is closed by checking if the first and last points are the same. If the polygon is not closed, it appends the first point to the end of the array.</td></tr><tr><td><a href="./toPolygon.html">toPolygon</a></td><td>Function</td><td>Converts two <a href="./Cartesian.html">Cartesian</a> points or a <a href="./Rect.html">Rect</a> into a <a href="./Polygon.html">Polygon</a>.</td></tr><tr><td><a href="./translate.html">translate</a></td><td>Function</td><td>Translate a point or polygon by a specified amount.</td></tr></tbody></table>',3)])])}const p=e(r,[["render",d]]);export{y as __pageData,p as default};
