import{_ as e,c as a,o as r,ag as n}from"./chunks/framework.8SQNO8WI.js";const m=JSON.parse('{"title":"Rectangle","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_geometry_rectangle.md","filePath":"library/index_geometry_rectangle.md"}'),d={name:"library/index_geometry_rectangle.md"};function i(o,t,l,c,h,s){return r(),a("div",null,[...t[0]||(t[0]=[n('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_geometry.html">Geometry</a></p><h1 id="rectangle" tabindex="-1">Rectangle <a class="header-anchor" href="#rectangle" aria-label="Permalink to &quot;Rectangle&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./isInPolygon.html">isInPolygon</a></td><td>Function</td><td>Determines whether a given point or rectangle is inside or on the edge of a polygon.</td></tr><tr><td><a href="./isRect.html">isRect</a></td><td>Function</td><td>Determines if the provided value is a <a href="./Rect.html">Rect</a>e.</td></tr><tr><td><a href="./largestInscribedRectangle.html">largestInscribedRectangle</a></td><td>Function</td><td>Computes the largest rectangle that can be inscribed within the given polygon.</td></tr><tr><td><a href="./LargestInscribedRectUnitOptions.html">LargestInscribedRectUnitOptions</a></td><td>Type</td><td>Configuration options for the largest inscribed rectangle algorithm.</td></tr><tr><td><a href="./Rect.html">Rect</a></td><td>Type</td><td>A rectangle (defined by its top-left corner, width and height)</td></tr><tr><td><a href="./RotatedRect.html">RotatedRect</a></td><td>Type</td><td>Represents a rectangle that has been rotated by a certain angle. Extends the <code>Rect</code> type with additional properties for the area and rotation angle. const hull = convexHull(points);</td></tr><tr><td><a href="./toSquare.html">toSquare</a></td><td>Function</td><td>Converts a <a href="./Rect.html">Rect</a> to the largest possible square that fits within it, centered along the longer dimension. If the rectangle is already a square, it returns the original rectangle.</td></tr></tbody></table>',3)])])}const p=e(d,[["render",i]]);export{m as __pageData,p as default};
