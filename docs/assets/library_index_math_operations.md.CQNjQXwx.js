import{_ as e,c as a,o as r,ag as n}from"./chunks/framework.8SQNO8WI.js";const p=JSON.parse('{"title":"Operations","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_math_operations.md","filePath":"library/index_math_operations.md"}'),o={name:"library/index_math_operations.md"};function i(d,t,s,h,l,c){return r(),a("div",null,[...t[0]||(t[0]=[n('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_math.html">Math</a></p><h1 id="operations" tabindex="-1">Operations <a class="header-anchor" href="#operations" aria-label="Permalink to &quot;Operations&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./ceil.html">ceil</a></td><td>Function</td><td>Returns the smallest integer greater than or equal to the given number, with optional tolerance and precision adjustments.</td></tr><tr><td><a href="./CeilOptions.html">CeilOptions</a></td><td>Type</td><td>Options for the <a href="./ceil.html">ceil</a> function</td></tr><tr><td><a href="./clamp.html">clamp</a></td><td>Function</td><td>Clamps a number within the inclusive range specified by <code>min</code> and <code>max</code>.</td></tr><tr><td><a href="./crossProduct.html">crossProduct</a></td><td>Function</td><td>Calculates the cross product of vectors OA and OB, where O, A, and B are points in 2D Cartesian space. The result is positive if the sequence OAB makes a counter-clockwise turn, negative for a clockwise turn, and zero if the points are collinear.</td></tr><tr><td><a href="./floor.html">floor</a></td><td>Function</td><td>Returns the largest integer less than or equal to the given number, with optional tolerance and precision adjustments.</td></tr><tr><td><a href="./FloorOptions.html">FloorOptions</a></td><td>Type</td><td>Options for the <a href="./floor.html">floor</a> function</td></tr><tr><td><a href="./lerp.html">lerp</a></td><td>Function</td><td>Performs linear interpolation between values a and b. Returns the value between a and b proportional to x (when x is between 0 and 1. When x is outside this range, the return value is a linear extrapolation).</td></tr><tr><td><a href="./modulo.html">modulo</a></td><td>Function</td><td>The % operator in JavaScript returns the remainder of a / b, but differs from some other languages in that the result will have the same sign as the dividend. For example, -1 % 8 == -1, whereas in some other languages (such as Python) the result would be 7. This function emulates the more correct modulo behavior, which is useful for certain applications such as calculating an offset index in a circular list.</td></tr><tr><td><a href="./round.html">round</a></td><td>Function</td><td>Returns the nearest integer to the given number, with optional precision adjustments.</td></tr><tr><td><a href="./RoundOptions.html">RoundOptions</a></td><td>Type</td><td>Options for the <a href="./round.html">round</a> function</td></tr></tbody></table>',3)])])}const m=e(o,[["render",i]]);export{p as __pageData,m as default};
