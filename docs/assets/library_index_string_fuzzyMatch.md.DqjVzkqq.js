import{_ as e,c as n,o as i,ag as a}from"./chunks/framework.8SQNO8WI.js";const l=JSON.parse('{"title":"Fuzzy Match","description":"","frontmatter":{},"headers":[],"relativePath":"library/index_string_fuzzyMatch.md","filePath":"library/index_string_fuzzyMatch.md"}'),r={name:"library/index_string_fuzzyMatch.md"};function o(s,t,d,h,c,f){return i(),n("div",null,[...t[0]||(t[0]=[a('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_string.html">String</a></p><h1 id="fuzzy-match" tabindex="-1">Fuzzy Match <a class="header-anchor" href="#fuzzy-match" aria-label="Permalink to &quot;Fuzzy Match&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./diceCoefficient.html">diceCoefficient</a></td><td>Function</td><td>Compute the dice coefficient measure of similarity between two strings</td></tr><tr><td><a href="./DiceCoefficientOptions.html">DiceCoefficientOptions</a></td><td>Type</td><td>Options for the <a href="./diceCoefficient.html">diceCoefficient</a> function</td></tr><tr><td><a href="./fuzzyMatch.html">fuzzyMatch</a></td><td>Function</td><td>Computes a fuzzy similarity score between two strings using a weighted combination of Levenshtein distance, Dice coefficient, and longest common substring metrics.</td></tr><tr><td><a href="./FuzzyMatchOptions.html">FuzzyMatchOptions</a></td><td>Type</td><td>Options for the <a href="./fuzzyMatch.html">fuzzyMatch</a> function</td></tr><tr><td><a href="./levenshteinDistance.html">levenshteinDistance</a></td><td>Function</td><td>Compute the levenshtein distance between two strings (similarity)</td></tr><tr><td><a href="./LevenshteinDistanceOptions.html">LevenshteinDistanceOptions</a></td><td>Type</td><td>Options for the <a href="./levenshteinDistance.html">levenshteinDistance</a> function</td></tr><tr><td><a href="./longestCommonSubstring.html">longestCommonSubstring</a></td><td>Function</td><td>Implementation of <a href="https://en.wikipedia.org/wiki/Longest_common_substring_problem" target="_blank" rel="noreferrer">Longest Common Substring</a> algorithm.</td></tr><tr><td><a href="./LongestCommonSubstringOptions.html">LongestCommonSubstringOptions</a></td><td>Type</td><td>Options for configuring the longest common substring calculation.</td></tr></tbody></table>',3)])])}const u=e(r,[["render",o]]);export{l as __pageData,u as default};
