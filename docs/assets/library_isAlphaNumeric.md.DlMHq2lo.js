import{_ as t,c as i,o as e,ag as s}from"./chunks/framework.8SQNO8WI.js";const u=JSON.parse('{"title":"Function: isAlphaNumeric()","description":"","frontmatter":{},"headers":[],"relativePath":"library/isAlphaNumeric.md","filePath":"library/isAlphaNumeric.md"}'),r={name:"library/isAlphaNumeric.md"};function n(h,a,l,p,o,c){return e(),i("div",null,[...a[0]||(a[0]=[s('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_string.html">String</a> &gt; <a href="./index_string_categorization.html">Categorization</a></p><h1 id="function-isalphanumeric" tabindex="-1">Function: isAlphaNumeric() <a class="header-anchor" href="#function-isalphanumeric" aria-label="Permalink to &quot;Function: isAlphaNumeric()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isAlphaNumeric</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/is-alpha-numeric.ts#L10" target="_blank" rel="noreferrer">is-alpha-numeric.ts:10</a></p><p>Test a string for all alphanumeric characters</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>string</code></td><td>string to test</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><p>true, if all characters in the string are alphanumeric</p>',10)])])}const k=t(r,[["render",n]]);export{u as __pageData,k as default};
