import{_ as e,c as a,o as i,ag as s}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Function: isOnPolygon()","description":"","frontmatter":{},"headers":[],"relativePath":"library/isOnPolygon.md","filePath":"library/isOnPolygon.md"}'),n={name:"library/isOnPolygon.md"};function o(r,t,l,h,d,p){return i(),a("div",null,[...t[0]||(t[0]=[s(`<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_geometry.html">Geometry</a> &gt; <a href="./index_geometry_polygon.html">Polygon</a></p><h1 id="function-isonpolygon" tabindex="-1">Function: isOnPolygon() <a class="header-anchor" href="#function-isonpolygon" aria-label="Permalink to &quot;Function: isOnPolygon()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> isOnPolygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   point</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Cartesian</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   polygon</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Polygon</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   tolerance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/is-on-polygon.ts#L18" target="_blank" rel="noreferrer">is-on-polygon.ts:18</a></p><p>Determines whether a given point lies exactly on the boundary of a polygon.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Default value</th><th>Description</th></tr></thead><tbody><tr><td><code>point</code></td><td><a href="./Cartesian.html"><code>Cartesian</code></a></td><td><code>undefined</code></td><td>The Cartesian coordinates of the point to test.</td></tr><tr><td><code>polygon</code></td><td><a href="./Polygon.html"><code>Polygon</code></a></td><td><code>undefined</code></td><td>The polygon, represented as an array of Cartesian points.</td></tr><tr><td><code>tolerance</code></td><td><code>number</code></td><td><code>1e-10</code></td><td>Optional tolerance for floating-point comparisons (default is 1e-10).</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>boolean</code></p><p><code>true</code> if the point lies on any edge of the polygon within the given tolerance, otherwise <code>false</code>.</p>`,10)])])}const g=e(n,[["render",o]]);export{k as __pageData,g as default};
