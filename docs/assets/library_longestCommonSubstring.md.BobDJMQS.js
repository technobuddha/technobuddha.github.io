import{_ as s,c as i,o as n,ag as a}from"./chunks/framework.8SQNO8WI.js";const m=JSON.parse('{"title":"Function: longestCommonSubstring()","description":"","frontmatter":{},"headers":[],"relativePath":"library/longestCommonSubstring.md","filePath":"library/longestCommonSubstring.md"}'),e={name:"library/longestCommonSubstring.md"};function r(o,t,h,l,d,g){return n(),i("div",null,[...t[0]||(t[0]=[a(`<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_string.html">String</a> &gt; <a href="./index_string_fuzzyMatch.html">Fuzzy Match</a></p><h1 id="function-longestcommonsubstring" tabindex="-1">Function: longestCommonSubstring() <a class="header-anchor" href="#function-longestcommonsubstring" aria-label="Permalink to &quot;Function: longestCommonSubstring()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> longestCommonSubstring</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   string1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   string2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">   __namedParameters</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LongestCommonSubstringOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/longest-common-substring.ts#L24" target="_blank" rel="noreferrer">longest-common-substring.ts:24</a></p><p>Implementation of <a href="https://en.wikipedia.org/wiki/Longest_common_substring_problem" target="_blank" rel="noreferrer">Longest Common Substring</a> algorithm.</p><p>Returns the longest possible substring that is substring of both of given strings.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>string1</code></td><td><code>string</code></td><td>First string.</td></tr><tr><td><code>string2</code></td><td><code>string</code></td><td>Second string.</td></tr><tr><td><code>__namedParameters</code></td><td><a href="./LongestCommonSubstringOptions.html"><code>LongestCommonSubstringOptions</code></a></td><td>-</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><p>A string that is common to both strings such that there is no common substring with size greater than the length of the string.</p>`,11)])])}const c=s(e,[["render",r]]);export{m as __pageData,c as default};
