import{_ as t,c as a,o as i,ag as n}from"./chunks/framework.8SQNO8WI.js";const g=JSON.parse('{"title":"Function: normalizeLineSegment()","description":"","frontmatter":{},"headers":[],"relativePath":"library/normalizeLineSegment.md","filePath":"library/normalizeLineSegment.md"}'),s={name:"library/normalizeLineSegment.md"};function r(h,e,l,o,m,d){return i(),a("div",null,[...e[0]||(e[0]=[n('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_geometry.html">Geometry</a> &gt; <a href="./index_geometry_lineSegment.html">Line Segment</a></p><h1 id="function-normalizelinesegment" tabindex="-1">Function: normalizeLineSegment() <a class="header-anchor" href="#function-normalizelinesegment" aria-label="Permalink to &quot;Function: normalizeLineSegment()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> normalizeLineSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">line</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LineSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> LineSegment</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/normalize-line-segment.ts#L12" target="_blank" rel="noreferrer">normalize-line-segment.ts:12</a></p><p>Returns a <a href="./LineSegment.html">LineSegment</a> where the point with the higher y-coordinate is always the starting point (x0, y0). If the original line&#39;s y1 is greater than y0, the line is returned as-is. Otherwise, the start and end points are swapped.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>line</code></td><td><a href="./LineSegment.html"><code>LineSegment</code></a></td><td>The line segment to process.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="./LineSegment.html"><code>LineSegment</code></a></p><p>A <a href="./LineSegment.html">LineSegment</a> with the topmost point as the starting point.</p>',10)])])}const c=t(s,[["render",r]]);export{g as __pageData,c as default};
