import{_ as t,c as e,o as s,ag as r}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Function: parseDate()","description":"","frontmatter":{},"headers":[],"relativePath":"library/parseDate.md","filePath":"library/parseDate.md"}'),i={name:"library/parseDate.md"};function n(h,a,o,l,p,d){return s(),e("div",null,[...a[0]||(a[0]=[r('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_time.html">Time</a> &gt; <a href="./index_time_parsing.html">Parsing</a></p><h1 id="function-parsedate" tabindex="-1">Function: parseDate() <a class="header-anchor" href="#function-parsedate" aria-label="Permalink to &quot;Function: parseDate()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> parseDate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">input</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Date</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/parse-date.ts#L68" target="_blank" rel="noreferrer">parse-date.ts:68</a></p><p>Parse a string into a Date object</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>input</code></td><td><code>string</code></td><td>The string containing a date</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Date" target="_blank" rel="noreferrer"><code>Date</code></a></p><p>new Date object</p><h2 id="remarks" tabindex="-1">Remarks <a class="header-anchor" href="#remarks" aria-label="Permalink to &quot;Remarks&quot;">​</a></h2><p>this is a little more generous about what formats it will take for a date, and if it can&#39;t match the input to one of it&#39;s supported formats it falls back to new Date(text)</p>',12)])])}const b=t(i,[["render",n]]);export{k as __pageData,b as default};
