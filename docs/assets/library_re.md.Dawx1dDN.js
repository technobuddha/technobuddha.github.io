import{_ as t,c as a,o as r,ag as s}from"./chunks/framework.8SQNO8WI.js";const g=JSON.parse('{"title":"Function: re()","description":"","frontmatter":{},"headers":[],"relativePath":"library/re.md","filePath":"library/re.md"}'),i={name:"library/re.md"};function n(l,e,p,o,h,d){return r(),a("div",null,[...e[0]||(e[0]=[s('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_regExp.html">RegExp</a> &gt; <a href="./index_regExp_construction.html">Construction</a></p><h1 id="function-re" tabindex="-1">Function: re() <a class="header-anchor" href="#function-re" aria-label="Permalink to &quot;Function: re()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> re</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">template</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> TemplateStringsArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[])</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RegExp</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/re.ts#L18" target="_blank" rel="noreferrer">re.ts:18</a></p><p>Constructs a new <code>RegExp</code> by interpolating template strings and provided regular expressions.</p><p>This function allows you to compose regular expressions using template literals, automatically merging flags and wrapping interpolated regex sources as non-capturing groups when appropriate.</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>template</code></td><td><code>TemplateStringsArray</code></td><td>The template string array containing the literal parts of the pattern.</td></tr><tr><td>...<code>args</code></td><td><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noreferrer"><code>RegExp</code></a>[]</td><td>The regular expressions to interpolate into the template.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><a href="https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/RegExp" target="_blank" rel="noreferrer"><code>RegExp</code></a></p><p>A new <code>RegExp</code> object with the combined pattern and merged flags.</p>',11)])])}const k=t(i,[["render",n]]);export{g as __pageData,k as default};
