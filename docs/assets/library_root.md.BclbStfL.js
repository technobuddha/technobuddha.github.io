import{_ as a,c as i,o as e,ag as s}from"./chunks/framework.8SQNO8WI.js";const k=JSON.parse('{"title":"Function: root()","description":"","frontmatter":{},"headers":[],"relativePath":"library/root.md","filePath":"library/root.md"}'),r={name:"library/root.md"};function o(n,t,h,d,l,p){return e(),i("div",null,[...t[0]||(t[0]=[s('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_string.html">String</a> &gt; <a href="./index_string_deconstruction.html">Deconstruction</a></p><h1 id="function-root" tabindex="-1">Function: root() <a class="header-anchor" href="#function-root" aria-label="Permalink to &quot;Function: root()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> root</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">text</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">options</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> RootOptions</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/root.ts#L21" target="_blank" rel="noreferrer">root.ts:21</a></p><p>Extract the root word, removing a prefix and/or suffix</p><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>text</code></td><td><code>string</code></td><td>The word, which might have</td></tr><tr><td><code>options</code></td><td><a href="./RootOptions.html"><code>RootOptions</code></a></td><td>see <a href="./RootOptions.html">RootOptions</a></td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><p>The root word</p><h2 id="see" tabindex="-1">See <a class="header-anchor" href="#see" aria-label="Permalink to &quot;See&quot;">​</a></h2><ul><li>prefix before it, and</li><li>suffix after it.</li></ul>',12)])])}const u=a(r,[["render",o]]);export{k as __pageData,u as default};
