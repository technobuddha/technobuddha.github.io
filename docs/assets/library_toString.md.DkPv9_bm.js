import{_ as e,c as i,o as a,ag as n}from"./chunks/framework.8SQNO8WI.js";const u=JSON.parse('{"title":"Function: toString()","description":"","frontmatter":{},"headers":[],"relativePath":"library/toString.md","filePath":"library/toString.md"}'),s={name:"library/toString.md"};function r(o,t,l,h,d,c){return a(),i("div",null,[...t[0]||(t[0]=[n('<p><a href="./../">@technobuddha</a> &gt; <a href="./../library.html">library</a> &gt; <a href="./index_object.html">Object</a> &gt; <a href="./index_object_conversion.html">Conversion</a></p><h1 id="function-tostring" tabindex="-1">Function: toString() <a class="header-anchor" href="#function-tostring" aria-label="Permalink to &quot;Function: toString()&quot;">​</a></h1><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> toString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">value</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> unknown</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>Defined in: <a href="https://github.com/technobuddha/library/blob/main/src/to-string.ts#L18" target="_blank" rel="noreferrer">to-string.ts:18</a></p><p>Converts an unknown value to its string representation.</p><ul><li>Returns an empty string if the value is <code>null</code> or <code>undefined</code>.</li><li>Returns the value itself if it is a string.</li><li>Converts booleans to <code>&#39;true&#39;</code> or <code>&#39;false&#39;</code>.</li><li>Converts symbols and bigints using their respective <code>toString</code> methods.</li><li>Returns a string representation for functions in the format <code>function &lt;name&gt;();</code>.</li><li>Converts numbers using their <code>toString</code> method.</li><li>For all other types, returns the result of <code>Object.prototype.toString</code>.</li></ul><h2 id="parameters" tabindex="-1">Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;Parameters&quot;">​</a></h2><table tabindex="0"><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><code>value</code></td><td><code>unknown</code></td><td>The value to convert to a string.</td></tr></tbody></table><h2 id="returns" tabindex="-1">Returns <a class="header-anchor" href="#returns" aria-label="Permalink to &quot;Returns&quot;">​</a></h2><p><code>string</code></p><p>The string representation of the input value.</p>',11)])])}const g=e(s,[["render",r]]);export{u as __pageData,g as default};
