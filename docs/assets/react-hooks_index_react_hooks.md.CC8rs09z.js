import{_ as t,c as a,o,ag as d}from"./chunks/framework.8SQNO8WI.js";const f=JSON.parse('{"title":"Hooks","description":"","frontmatter":{},"headers":[],"relativePath":"react-hooks/index_react_hooks.md","filePath":"react-hooks/index_react_hooks.md"}'),r={name:"react-hooks/index_react_hooks.md"};function s(n,e,i,c,h,u){return o(),a("div",null,[...e[0]||(e[0]=[d('<p><a href="./../">@technobuddha</a> &gt; <a href="./../react-hooks.html">react-hooks</a> &gt; <a href="./index_react.html">React</a></p><h1 id="hooks" tabindex="-1">Hooks <a class="header-anchor" href="#hooks" aria-label="Permalink to &quot;Hooks&quot;">â€‹</a></h1><table tabindex="0"><thead><tr><th>Name</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td><a href="./useDerivedState.html">useDerivedState</a></td><td>Function</td><td>Like <code>useState</code>, but the value is re-initialized from <code>initialValue</code> whenever <code>deps</code> change. Allows both derived (from dependencies) and manual updates. Useful for state that depends on props or other values, but can also be set directly.</td></tr><tr><td><a href="./useHMR.html">useHMR</a></td><td>Function</td><td>React hook that tracks Hot Module Replacement (HMR) updates in a Vite development environment.</td></tr><tr><td><a href="./useLocal.html">useLocal</a></td><td>Function</td><td>Provides a mutable value that persists for the lifetime of the component, similar to <code>useRef</code>, but with a convenient setter function like <code>useState</code>. Updating the value does not cause a re-render.</td></tr><tr><td><a href="./useLocalStorage.html">useLocalStorage</a></td><td>Function</td><td>Similar to <code>React.useState</code>, returns a stateful value and a function to update it. The state value is also saved in <code>localStorage</code>.</td></tr><tr><td><a href="./usePrevious.html">usePrevious</a></td><td>Function</td><td>Tracks the previous value of a variable across renders.</td></tr><tr><td><a href="./useWhyDidIRender.html">useWhyDidIRender</a></td><td>Function</td><td>Logs to the console whenever the given component re-renders and its props have changed. Useful for debugging unnecessary or unexpected re-renders during development.</td></tr><tr><td><a href="./useWindowSize.html">useWindowSize</a></td><td>Function</td><td>Gets the current window size, including the dimensions of the scroll bars.</td></tr></tbody></table>',3)])])}const m=t(r,[["render",s]]);export{f as __pageData,m as default};
